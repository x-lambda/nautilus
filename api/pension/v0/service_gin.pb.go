// Code generated by github.com/x-lambda/protoc-gen-gin. DO NOT EDIT.

package pension_v0

import (
	context "context"
	errors "errors"
	gin "github.com/gin-gonic/gin"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the github.com/x-lambda/protoc-gen-gin package it is being compiled against.
// context.
// gin.errors.

type AdminServiceHTTPServer interface {
	Login(context.Context, *LoginReq) (*LoginResp, error)

	Logout(context.Context, *EmptyReq) (*EmptyResp, error)
}

func RegisterAdminServiceHTTPServer(r gin.IRouter, srv AdminServiceHTTPServer) {
	s := AdminService{
		server: srv,
		router: r,
		resp:   defaultAdminServiceResp{},
	}
	s.RegisterService()
}

type AdminService struct {
	server AdminServiceHTTPServer
	router gin.IRouter
	resp   interface {
		Error(ctx *gin.Context, err error)
		ParamsError(ctx *gin.Context, err error)
		Success(ctx *gin.Context, data interface{})
	}
}

// Resp 返回值
type defaultAdminServiceResp struct{}

func (resp defaultAdminServiceResp) response(ctx *gin.Context, status, code int, msg string, data interface{}) {
	ctx.JSON(status, map[string]interface{}{
		"code": code,
		"msg":  msg,
		"data": data,
	})
}

// Error 返回错误信息
func (resp defaultAdminServiceResp) Error(ctx *gin.Context, err error) {
	code := -1
	status := 500
	msg := "未知错误"

	if err == nil {
		msg += ", err is nil"
		resp.response(ctx, status, code, msg, nil)
		return
	}

	type iCode interface {
		HTTPCode() int
		Message() string
		Code() int
	}

	var c iCode
	if errors.As(err, &c) {
		status = c.HTTPCode()
		code = c.Code()
		msg = c.Message()
	}

	_ = ctx.Error(err)

	resp.response(ctx, status, code, msg, nil)
}

// ParamsError 参数错误
func (resp defaultAdminServiceResp) ParamsError(ctx *gin.Context, err error) {
	_ = ctx.Error(err)
	resp.response(ctx, 400, 400, "参数错误", nil)
}

// Success 返回成功信息
func (resp defaultAdminServiceResp) Success(ctx *gin.Context, data interface{}) {
	resp.response(ctx, 200, 0, "成功", data)
}

func (s *AdminService) Login_0(ctx *gin.Context) {
	var in LoginReq

	if err := ctx.ShouldBindJSON(&in); err != nil {
		s.resp.ParamsError(ctx, err)
		return
	}

	// TODO use metadata.NewIncomingContext
	// support GRPC/HTTP
	// timeout check with newCtx.Done()
	// md := metadata.New(nil)
	// for k, v := range ctx.Request.Header {
	// md.Set(k, v...)
	// }
	// newCtx := metadata.NewIncomingContext(ctx, md)
	newCtx := ctx.Request.Context()
	out, err := s.server.(AdminServiceHTTPServer).Login(newCtx, &in)
	if err != nil {
		s.resp.Error(ctx, err)
		return
	}

	s.resp.Success(ctx, out)
}

func (s *AdminService) Logout_0(ctx *gin.Context) {
	var in EmptyReq

	if err := ctx.ShouldBindJSON(&in); err != nil {
		s.resp.ParamsError(ctx, err)
		return
	}

	// TODO use metadata.NewIncomingContext
	// support GRPC/HTTP
	// timeout check with newCtx.Done()
	// md := metadata.New(nil)
	// for k, v := range ctx.Request.Header {
	// md.Set(k, v...)
	// }
	// newCtx := metadata.NewIncomingContext(ctx, md)
	newCtx := ctx.Request.Context()
	out, err := s.server.(AdminServiceHTTPServer).Logout(newCtx, &in)
	if err != nil {
		s.resp.Error(ctx, err)
		return
	}

	s.resp.Success(ctx, out)
}

func (s *AdminService) RegisterService() {

	s.router.Handle("POST", "/api/v0/admin/login", s.Login_0)

	s.router.Handle("POST", "/api/v0/admin/logout", s.Logout_0)

}
